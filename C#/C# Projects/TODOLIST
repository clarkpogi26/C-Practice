using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Reflection.Metadata.Ecma335;
using System.Runtime.Intrinsics.Arm;
using System.Runtime.Intrinsics.X86;
using System.Security.Cryptography;
using System.Threading.Channels;
using static Program;

class Program
{
    public static UserManager u = new();
    public static TaskManager t = new();
    public static Dictionary<int, HashSet<(int, String)>> userProg = new();
    public static Dictionary<int, User> users = new();
    public static Dictionary<int, Task> tasks = new();
    public static int userKey = 1;  // Problem: 
    public static int taskKey = 1;  // Problem: if I press 0 in choosing an ID without 0 being there yet, it crashes
    public static User CurUser;     // Problem: 
    public static int CurUserKey;   // Task : 
    static void Main(string[] args) // Task : Add a User Interface design like Console.ForegroundColor
    {                               // Task : Make a JSON save
        while (true)
        {
            Console.Clear(); CurUserKey = u.GetCurUserKey();
            if (CurUser != null) Console.WriteLine($"Current User: {CurUser.name}");
            Console.WriteLine("1. User\n2. Task\n3. Leaderboard"); Console.WriteLine(CurUser != null ? "4. Log Out" : "");
            int choice = Input();
            if (choice > 8 || (CurUser == null && choice == 4)) continue;
            switch (choice)
            {
                case 1: u.UserMenu(); break;
                case 2: t.TaskMenu(); break;
                case 3: Leaderboard(); break;
                case 4: u.UserLogOut(); break;
            }
        }
    }
    public class UserManager
    {
        public void UserMenu()
        {
            while (true)
            {
                Console.Clear();
                ShowUser();
                if (users.Count < 1) Console.WriteLine("No users made yet\n(1) Make\n(Enter) Exit");
                if (users.Count > 0) Console.WriteLine("(1) Make\n(2) Choose\n(3) Edit\n(4) Remove\n(Enter) Exit");
                int user = Input();
                if (user > 4 || user == -1) continue;
                if (user == -2) { Console.Clear(); break; }
                if (user == 1) { Console.Clear(); MakeUser(); continue; }              
                if (user == 2) { Console.Clear(); PickUser(); break; }
                if (user == 3 && users.Count > 0) { Console.Clear(); EditUser(); continue; }
                if (user == 4 && users.Count > 0) { Console.Clear(); RemoveUser(); continue; }
            }
        }
        public void MakeUser()
        {
            while (true)
            {
                if (users.Count == 10) { Console.WriteLine("You reached the maximum users"); Thread.Sleep(800); break; }
                Console.Write("'done' Back\nUsername: ");
                string name = Console.ReadLine();
                if (name.ToLower() == "done") break;
                User existing = users.Values.FirstOrDefault(k => k.name == name);
                if (existing != null) { Console.WriteLine("Already Taken"); Thread.Sleep(500); continue; }
                else
                {
                    users.Add(userKey, new User(name, 0));
                    userProg[userKey] = new HashSet<(int, String)>();
                    Console.Clear(); Console.WriteLine($"{users[userKey].name} has been created"); Thread.Sleep(1350);
                    userKey++;
                    Arrange(true);
                    break;
                }
            }
        }
        public void PickUser()
        {
            while (true)
            {
                if (users.Count == 1) { CurUser = users[1]; Console.Clear(); Console.WriteLine($"Welcome {CurUser.name}!"); Thread.Sleep(1350); break; }
                ShowUser();
                Console.WriteLine("(Enter) Back\nChoose a user: ");
                int chosen = Input();
                if (chosen > users.Count || chosen == -1) { Console.Clear(); continue; }
                if (chosen == -2) break;
                CurUser = GetUserKey(chosen);
                Console.Clear(); Console.WriteLine($"Welcome {CurUser.name}!"); Thread.Sleep(1350); break;
            }
        }
        public void EditUser()
        {
            while (true)
            {
                ShowUser();
                Console.Write("(Enter) Back\nChoose a user to edit: ");
                int edit = Input();
                if (edit > users.Count || edit == -1) { Console.Clear(); continue; }
                if (edit == -2) break;
                Console.Clear();
                Console.Write($"'done' Back\n{users[edit].name} => ?\nNew Username: ");
                String newUser = Console.ReadLine();
                if (newUser == "done") break;
                if (users.ContainsKey(edit)) { Console.Clear(); Console.WriteLine($"{users[edit].name} is changed to {newUser}"); Thread.Sleep(1350); }
                if (CurUser == users[edit]) CurUser.name = newUser;
                users[edit].name = newUser; break;
            }
        }
        public void RemoveUser()
        {
            while (true)
            {
                ShowUser();
                Dictionary<int, HashSet<(int, String)>> update = new();
                Console.Write("(Enter) Back\nChoose a user to remove: ");
                int del = Input();
                if (del > users.Count || del == -1) { Console.Clear(); continue; }
                if (del == -2) break;
                if (CurUser == users[del]) CurUser = null;
                Console.Clear(); Console.WriteLine($"{users[del].name} has been removed"); Thread.Sleep(1350);
                UserRemove(GetUserKey(del));
                foreach (var user in userProg.Where(k => k.Key != 0 && k.Key != del))
                { if (user.Key == del || del == 0) continue; int newKey = user.Key > del ? user.Key - 1 : user.Key; update[newKey] = user.Value; }
                userProg = update; break;
            }
        }
        public void UserRemove(User user) { var removing = users.FirstOrDefault(kvp => kvp.Value.name == user.name).Key; users.Remove(removing); Arrange(true); }
        public void UserLogOut() { Console.Clear(); Console.WriteLine($"Goodbye {CurUser.name}!"); Thread.Sleep(1350); CurUser = null; }
        public void ShowUser() { Console.WriteLine("Users:"); foreach (var user in users) { Console.WriteLine($"{user.Key}. {user.Value.name} = ({user.Value.score})"); } }
        public User GetUserKey(int key) { return users.ContainsKey(key) ? users[key] : null; }
        public int GetCurUserKey() { return users.FirstOrDefault(kvp => kvp.Value == CurUser).Key; }
    }
    public class TaskManager
    {
        public void TaskMenu()
        {
            while (true)
            {
                Console.Clear();
                if (CurUser == null) { ShowTask(); Console.WriteLine("Log in first to access the menu\nPress any key to exit"); Console.ReadKey(true); break; }
                ProgTask(); ShowTask();
                if (tasks.Count < 1) Console.WriteLine("No task made yet\n(1) Make\n(Enter) Exit");
                if (tasks.Count > 0) Console.WriteLine("(1) Make\n(2) Mark\n(3) Edit\n(4) Remove\n(Enter) Exit");
                int task = Input();
                if (task > 4 || task == -1) continue;
                if (task == -2) { Console.Clear(); break; }
                if (task == 1) { Console.Clear(); MakeTask(); continue; }
                if (task == 2) { Console.Clear(); MarkTask(); continue; }
                if (task == 3 && tasks.Count > 0) { Console.Clear(); EditTask(); continue; }
                if (task == 4 && tasks.Count > 0) { Console.Clear(); RemoveTask(); continue; }              
            }
        }
        public void MakeTask()
        {
            while (true)
            {
                if (tasks.Count == 10) { Console.WriteLine("You reached the maximum tasks"); Thread.Sleep(800); break; }
                Console.Write("'done' Back\nAdd a title here: ");
                string title = Console.ReadLine();
                if (title.ToLower() == "done") break;
                Console.Write("'done' Back\nAdd a description here: ");
                string desc = Console.ReadLine();
                if (desc.ToLower() == "done") break;
                tasks[taskKey] = new Task(title.ToUpper(), desc, "<>");
                Console.Clear(); Console.WriteLine($"{tasks[taskKey].title} has been created"); Thread.Sleep(1350);
                taskKey++; Arrange(false); break;
            }
        }
        public void MarkTask()
        {
            while (true)
            {
                ProgTask(); ShowTask();
                Console.Write("(Enter) Back\nChoose a task to mark: ");
                int taskID = Input();
                if (taskID > tasks.Count || taskID == -1) { Console.Clear(); continue; }
                if (taskID == -2) break;
                Console.Clear();
                Console.Write("(Enter) Back\n(1) 'To Do'\n(2) 'Ongoing'\n(3) 'Done'");
                int choice = Input();
                if (choice > 3 || choice == -1 || choice == -2) { Console.Clear(); continue; }
                Console.Clear();
                if (choice == 1) { TaskMark(CurUserKey, taskID, "To Do"); }
                if (choice == 2) { TaskMark(CurUserKey, taskID, "Ongoing"); }
                if (choice == 3)
                {
                    if (userProg[CurUserKey].Any(k => k.Item1 == taskID && k.Item2 == "Done"))
                    { Console.WriteLine("You already completed this task"); Thread.Sleep(800); Console.Clear(); continue; }
                    if (userProg[CurUserKey].Any(k => k.Item2 != null)) { userProg[CurUserKey].Clear(); }
                    userProg[CurUserKey].Add((taskID, "Done")); CurUser.score++;
                    Console.WriteLine($"{CurUser.name} completed the task! +1 Point ({CurUser.score} Points)"); Thread.Sleep(800); Console.Clear(); continue;
                }
            }
        }
        public void EditTask()
        {
            while (true)
            {
                ProgTask(); ShowTask();
                Console.Write("(Enter) Back\nChoose a task to edit: ");
                int edit = Input();
                if (edit > tasks.Count || edit == -1) { Console.Clear(); continue; }
                if (edit == -2) break;
                Console.Write("'done' Back\nEdit title here: ");
                string title = Console.ReadLine();
                if (title.ToLower() == "done") break;
                Console.Write("Edit description here: ");
                string desc = Console.ReadLine();
                Console.Clear(); Console.WriteLine($"{tasks[edit].title} has been changed to {title}"); Thread.Sleep(1350);
                if (desc.ToLower() == "done") { tasks[edit].title = title; break; }
                if (tasks.ContainsKey(edit)) { tasks[edit] = new Task(title.ToUpper(), desc, tasks[edit].status); break; }
            }
        }
        public void RemoveTask()
        {
            while (true)
            {
                ShowTask();
                Console.Write("(Enter) Back\nChoose a task to remove: ");
                int rem = Input();
                if (rem > tasks.Count || rem == -1) { Console.Clear(); continue; }
                if (rem == -2) break;
                Console.Clear(); Console.WriteLine($"{tasks[rem].title} has been removed"); Thread.Sleep(1350);
                foreach (var key in userProg.Keys.Where(k => k != 0 && k != rem))
                { userProg[key] = userProg[key].Select(n => n.Item1 > rem ? (n.Item1 - 1, n.Item2) : n).ToHashSet(); }
                TaskRemove(GetTaskKey(rem)); Arrange(false); break;
            }
        }
        public void TaskRemove(Task task) { var removing = tasks.FirstOrDefault(k => k.Value.title == task.title).Key; tasks.Remove(removing); }
        public static void TaskMark(int CUK, int taskID, String state)
        {
            while (true)
            {
                Console.Clear();
                if (userProg[CUK].Any(k => k.Item1 == taskID && k.Item2 == state))
                { Console.WriteLine($"You already marked this as '{state}'"); Thread.Sleep(800); Console.Clear(); break; }
                if (userProg[CUK].Any(k => k.Item2 == "Done"))
                { CurUser.score--; Console.WriteLine($"You lost your point! -1 Point ({CurUser.score} Points)"); Thread.Sleep(800); Console.Clear(); }
                if (userProg[CUK].Any(k => k.Item2 != null)) { userProg[CUK].Clear(); }
                userProg[CUK].Add((taskID, state)); break;
            }
        }
        public static Task GetTaskKey(int key) { return tasks.ContainsKey(key) ? tasks[key] : null; }
        public void ShowTask() { Console.WriteLine("Tasks:"); foreach (var task in tasks) Console.WriteLine($"{task.Key}. {task.Value.title} | {task.Value.desc} <{task.Value.status}>"); }
        public void ProgTask() { foreach (var task in tasks) { var match = userProg[CurUserKey].FirstOrDefault(k => k.Item1 == task.Key); { task.Value.status = match.Item2; } } }
    }
    public static void Leaderboard()
    {
        while (true)
        {
            Console.Clear();
            if (users.Count < 1) { Console.WriteLine("No users found"); Thread.Sleep(800); }
            if (users.Count > 0)
            {
                List<KeyValuePair<int, User>> order = users.OrderBy(k => k.Key).ToList();
                foreach (var kvp in order) Console.WriteLine($"{kvp.Key}. {kvp.Value.name} ({kvp.Value.score})");
                Console.WriteLine("(1) Highest\n(2) Lowest\n(3) A-Z\n(4) Z-A\n(5) Search\n(Enter) Exit");
                while (true)
                {
                    int rank = 1;
                    int lead = Input();
                    if (lead > 5 || lead == -1) { Console.Clear(); Console.WriteLine("(1) Highest\n(2) Lowest\n(3) A-Z\n(4) Z-A\n(5) Search\n(Enter) Back"); continue; }
                    if (lead == -2) { Console.Clear(); break; }
                    if (lead == 1) { order = users.OrderByDescending(k => k.Value.score).ToList(); }
                    if (lead == 2) { order = users.OrderBy(k => k.Value.score).ToList(); }
                    if (lead == 3) { order = users.OrderBy(k => k.Value.name).ToList(); }
                    if (lead == 4) { order = users.OrderByDescending(k => k.Value.name).ToList(); }
                    if (lead == 5) { Console.Clear(); NameSearch(); }
                    Console.Clear(); Console.WriteLine("Leaderboard:");
                    foreach (var kvp in order) { Console.WriteLine($"{rank++}. {kvp.Value.name} ({kvp.Value.score})"); }
                    Console.WriteLine("(1) Highest\n(2) Lowest\n(3) A-Z\n(4) Z-A\n(5) Search\n(Enter) Back");
                }
            }
            break;
        }
    }
    public static void NameSearch()
    {
        while (true)
        {
            Console.WriteLine("'done' Back\nSearch a name: ");
            String user = Console.ReadLine();
            if (user == "done") { Console.Clear(); break; }
            var s = users.FirstOrDefault(k => k.Value.name == user);
            if (s.Value == null) { Console.Clear(); Console.WriteLine("That name doesn't exist"); continue; }
            Console.Clear(); Console.WriteLine("Press any key to go back");
            Console.WriteLine($"User:\n{s.Key}. {s.Value.name} ({s.Value.score})"); Console.ReadKey(true);
            Console.Clear();
        }
    }
    public static int Input()
    {
        char key = Console.ReadKey(true).KeyChar;
        if (key == '\r') return -2;
        return int.TryParse(key.ToString(), out int choice) ? choice : -1;
    }
    public static void Arrange(bool w)
    {
        if (w == true && users.Any())
        {
            Dictionary<int, User> newUsers = new();
            int tKey = 1;
            int maxUser = users.Max(k => k.Key);
            foreach (var x in users.OrderBy(k => k.Key == 0 ? int.MaxValue : k.Key))
            { if (x.Key == 0) { newUsers[9] = x.Value; continue; } if (users.Count == 10 && x.Key == maxUser) { newUsers[0] = x.Value; continue; } newUsers[tKey++] = x.Value; }
            users = newUsers;
        }
        else if (w == false && tasks.Any())
        {
            Dictionary<int, Task> newTasks = new();
            int yKey = 1;
            int maxTask = tasks.Max(k => k.Key);
            foreach (var x in tasks.OrderBy(k => k.Key == 0 ? int.MaxValue : k.Key))
            { if (x.Key == 0) { newTasks[9] = x.Value; continue; } if (tasks.Count == 10 && x.Key == maxTask) { newTasks[0] = x.Value; continue; } newTasks[yKey++] = x.Value; }
            tasks = newTasks;
        }
    }
    public class User
    {
        public String name { get; set; }
        public int score { get; set; }
        public User(String Name, int Score)
        {
            name = Name;
            score = Score;
        }
    }
    public class Task
    {
        public String title { get; set; }
        public String desc { get; set; }
        public String status { get; set; }
        public Task(string Title, string Description, string Status)
        {
            title = Title;
            desc = Description;
            status = Status;
        }
    }
}